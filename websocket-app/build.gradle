buildscript {
	repositories {
		mavenCentral()
		maven { url "http://repo.spring.io/libs-release" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
		classpath("se.transmode.gradle:gradle-docker:$gradleDockerVersion")                
    	}
}

apply plugin: 'spring-boot'
apply plugin: 'docker'

jar {
	baseName = 'websocket-app'
	version = "$version" 
}
 
dependencies {
	/* create a new configuration for all of the application dependencies */
	configurations {
 		boot {
 			extendsFrom runtime
 		}
		testBoot {
			extendsFrom testRuntime
		}
	}
	
	compile("org.springframework.boot:spring-boot-starter-websocket:$springBootVersion")
	runtime("org.logback-extensions:logback-ext-loggly:$logbackExtensionsVersion")
	runtime("org.codehaus.groovy:groovy-all:$groovyVersion")	
	testCompile("org.springframework.boot:spring-boot-starter-test:$springBootVersion")
	testCompile("commons-codec:commons-codec:$commonsCodecVersion")	
	boot project(':data-dynamodb')
	boot project(':message-sns')
}

/* use the application dependencies */
bootRepackage {
	customConfiguration = "boot"
}

/* include the application dependencies in the distribution */
applicationDistribution.from(configurations.boot) {
	into "lib"
}

/* add application dependencies to the classpath */
startScripts {
	classpath += configurations.boot
	doLast {
		logger.info(unixScript.text)
		unixScript.text = unixScript.text.replace('CLASSPATH=', 'CLASSPATH=$APP_HOME:')
		logger.info(unixScript.text)
	}
}

/* configure the memory usage for the JVM */
applicationDefaultJvmArgs = ["-Xms128M", "-Xmx128M"]

group = 'reideltj'
mainClassName = 'com.fancypants.common.application.Application'

docker {
	baseImage = 'java:7'
}

distDocker {
	exposePort 8004
	setEnvironment 'SNS_TOPIC_PREFIX', 'device-'
}
