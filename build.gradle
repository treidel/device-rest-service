/* determine the version code to use */
def buildNumber = System.getenv("BUILD_NUMBER")
def buildVersion = null != buildNumber ? buildNumber : "DEVELOPER"

subprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'

	logger.info("using buildVersion=$buildVersion")

	/* configure the common naming + version */
	group = 'com.fancypants'
	version = "$buildVersion"

	/* use JDK 7 */
	sourceCompatibility = 1.7

	/* define the versions of the major libraries we are using */
	ext {    
		springVersion = "4.1.6.RELEASE"
		springDataVersion = "1.8.0.RELEASE"
		springHateosVersion = "0.16.0.RELEASE"
		springBootVersion = "1.1.8.RELEASE"
		springPluginVersion = "1.1.0.RELEASE"
		springSecurityVersion = "4.0.0.RELEASE"
		springSessionVersion = "1.0.0.RELEASE"
		junitVersion = "4.12"
		rabbitmqVersion = "3.5.2"
		apacheStormVersion = "0.9.4"
		apacheCuratorVersion = "2.6.0"
		apacheJamesVersion = "0.7.2"
		apacheHttpcomponentsVersion = "4.3.2"
		apacheCommonsLang3Version = "3.3.2"
		jettyVersion = "9.2.8.v20150217"
		slf4jVersion = "1.7.7"
		groovyVersion = "2.4.3"
		jsonpathVersion = "0.9.1"
		amazonAwsVersion = "1.9.16"
		amazonKinesisStormSpoutVersion = "1.1.0" 
		kryoVersion = "2.21"
		jacksonVersion = "2.4.5"
		rabbitmqVersion = "3.4.3"
		logbackVersion = "1.1.3"
		logbackExtensionsVersion = "0.1.2"
		jodatimeVersion = "2.7"
		gradleDockerVersion = "1.2"
		kafkaVersion = "0.8.2.1"
		commonsBeanutilsVersion = "1.9.2"
		commonsLoggingVersion = "1.2"
		commonsIOVersion = "2.4"
		commonsCodecVersion = "1.6"
		objenesisVersion = "2.1"
		hamcrestVersion = "1.3"
		yamlVersion = "1.13"
		clojureVersion = "1.5.1"
		clojureJavaClasspath = "0.2.0"
		cljtimeVersion = "0.4.1"
		ringVersion = "1.1.5"
		hiccupVersion = "1.0.0"
		cltjStacktraceVersion = "0.2.4"
		jlineVersion = "2.11"
		log4jVersion = "1.2.17"
		zookeeperVersion = "3.4.6"
		jcommanderVersion = "1.48"
		spotifyDockerClientVersion = "2.7.25"
		janinoVersion = "2.7.8"		
	}

	/* define the group overrides */
	def groupOverrides = [
		"org.springframework":"$springVersion",
		"com.fasterxml.jackson.core":"$jacksonVersion",
		"org.slf4j":"$slf4jVersion",
		"ch.qos.logback":"$logbackVersion",
		"commons-logging":"$commonsLoggingVersion",
		"org.objenesis":"$objenesisVersion",
		"org.apache.httpcomponents":"$apacheHttpcomponentsVersion",
		"org.hamcrest":"$hamcrestVersion",
		"joda-time":"$jodatimeVersion",
		"org.yaml":"$yamlVersion",
		"commons-io":"$commonsIOVersion",
		"clj-time":"$cljtimeVersion",
		"ring":"$ringVersion",
		"hiccup":"$hiccupVersion",
		"clj-stacktrace":"$cltjStacktraceVersion",
		"org.apache.storm":"$apacheStormVersion",
		"commons-codec":"$commonsCodecVersion",
		"jline":"$jlineVersion",
		"log4j":"$log4jVersion",
		"org.apache.zookeeper":"$zookeeperVersion",
		"junit":"$junitVersion"
	]
	/* define the package overrides */
	def packageOverrides = [
		"org.clojure:clojure":"$clojureVersion",
		"org.clojure:java.classpath":"$clojureJavaClasspath",
		"org.apache.commons:commons-lang3":"$apacheCommonsLang3Version"
	]

	repositories {
		mavenCentral()
		maven { url "http://repo.spring.io/libs-release" }
		maven { url "http://clojars.org/repo" }
	}
	
	/* global dependencies */
	dependencies {
		// everyone needs slf4j
		compile("org.slf4j:slf4j-api:$slf4jVersion")
		// everyone needs junit
		testCompile("junit:junit:$junitVersion")		
	}
	
	configurations {
		// set the resolution strategy to all configurations
		all {
  			resolutionStrategy {
    				// fail eagerly on version conflict (includes transitive dependencies)
    				// e.g. multiple different versions of the same dependency (group and name are equal)
    				//failOnVersionConflict()
				// resolve conflicting groups
				eachDependency { 
					DependencyResolveDetails details ->
					// first check if a package override exists
					if (packageOverrides.containsKey(details.requested.group + ":" + details.requested.name)) {
						def packageVersion = packageOverrides[details.requested.group + ":" + details.requested.name]
						if (details.requested.version != packageVersion) {
							logger.info "Overriding package dependency ${details.requested.group}:${details.requested.name} version ${details.requested.version} --> $packageVersion"
							details.useVersion packageVersion
						}
						// finished for this element
						return
					}				
					// next check if a group override exists
					if (groupOverrides.containsKey(details.requested.group)) {
						def groupVersion = groupOverrides[details.requested.group]
						if (details.requested.version != groupVersion) {
							logger.info "Overriding group dependency ${details.requested.group}:${details.requested.name} version ${details.requested.version} --> $groupVersion"
							details.useVersion groupVersion
						}
					}
				}		
			}
			// exclude specific items to avoid complaints
			exclude group: 'org.slf4j', module: 'slf4j-log4j12'
		}
		// define a test configuration to handle inter-project test dependencies
		testOutput.extendsFrom(testCompile)

		// a new jar task to package test classes
		task jarTest (type: Jar, dependsOn: testClasses) {
			from sourceSets.test.output 
			classifier = 'test'
		}

		// a new artifact for test 
		artifacts {
			testOutput jarTest
		}
	}

}

project(':data') { 
	dependencies {
		compile project(':common') 
	}
}

project(':data-dynamodb') {
	dependencies {
		compile project(':common')
		compile project(':data')
		testCompile project(path: ':data', configuration: 'testOutput')
	}
}

project(':rest') {
	dependencies {
		compile project(':common')
		compile project(':data')
		compile project(':device')
		testCompile project(path: ':data', configuration: 'testOutput')
	}
}

project(':stream') {	
	dependencies {
		compile project(':common')
		testCompile project(path: ':data', configuration: 'testOutput')
	}
}

project(':stream-kinesis') {
	dependencies {
		compile project(':common')
		compile project(':stream')
		compile project(':data')
	}
}

project(':stream-kafka') {
	dependencies {
		compile project(':common')
		compile project(':stream')
		compile project(':data')	
		testCompile project(path: ':stream', configuration: 'testOutput')
	}
}

project(':message') {
	dependencies {
		compile project(':common')
	}
}

project(':message-rabbitmq') {
	dependencies {
		compile project(':common')
		compile project(':message')
		testCompile project(path: ':message', configuration: 'testOutput')
	}
}

project(':device') { 
	dependencies {
		compile project(':common')
		compile project(':data')
		compile project(':stream')
		compile project(':message')
	}
}

project(':records') { 
	dependencies {
		compile project(':common')
		compile project(':device')
	}
}

project(':usage') {
	dependencies {
		compile project(':common')
		compile project(':device')
	}
}

project(':app') {
	dependencies {
		compile project(':common')
		compile project(':data')
		compile project(':device')
	}
}

project(':rest-app') {
	dependencies {
		compile project(':common')
		compile project(':rest')
		compile project(':app')
		compile project(':usage')
		compile project(':data')
		testCompile project(path: ':data', configuration: 'testOutput')
		testCompile project(path: ':rest', configuration: 'testOutput')
		testCompile project(path: ':device', configuration: 'testOutput')
	}
}

project(':rest-device') {
	dependencies {
		compile project(':common')
		compile project(':rest')
		compile project(':device')
		testCompile project(path: ':data', configuration: 'testOutput')
		testCompile project(path: ':rest', configuration: 'testOutput')
		testCompile project(path: ':message', configuration: 'testOutput')
	}
}

project(':storm') {
	dependencies {
		compile project(':common')
		compile project(':records')
	}
}

project(':storm-kinesis') {
	dependencies {
		compile project(':common')
		compile project(':storm')
	}
}

project(':storm-kafka') {
	dependencies {
		compile project(':common')
		compile project(':storm')
	}
}

project(':storm-duplicate') { 
	dependencies { 
		compile project(':common')
		compile project(':data')
		compile project(':storm')
	}
}

project(':storm-usage') { 
	dependencies { 
		compile project(':common')
		compile project(':data')
		compile project(':storm')
		compile project(':usage')
		compile project(':message')
	}
}

project(':websocket') {
	dependencies {
		compile project(':common')
		compile project(':rest')
	}
}

project(':websocket-app') {
	dependencies {
		compile project(':common')
		compile project(':websocket')
		compile project(':app')
		compile project(':data')
		testCompile project(path: ':data', configuration: 'testOutput')
		testCompile project(path: ':websocket', configuration: 'testOutput')
		testCompile project(path: ':message', configuration: 'testOutput')
	}
}

project(':websocket-device') {
	dependencies {
		compile project(':common')
		compile project(':websocket')
		compile project(':device')
		compile project(':records')
		compile project(':usage')
		compile project(':data')
		testCompile project(path: ':data', configuration: 'testOutput')
		testCompile project(path: ':rest', configuration: 'testOutput')
		testCompile project(path: ':stream', configuration: 'testOutput')
		testCompile project(path: ':websocket', configuration: 'testOutput')
	}
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}

