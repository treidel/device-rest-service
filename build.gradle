def versionOverrides = [
	"org.springframework:spring-core": "4.0.6.RELEASE",
	"org.springframework:spring-tx": "4.0.6.RELEASE",
	"org.springframework:spring-aop": "4.0.6.RELEASE",
	"org.springframework:spring-context": "4.0.6.RELEASE",
	"org.springframework:spring-webmvc": "4.0.6.RELEASE",
	"org.springframework:spring-test" : "4.0.6.RELEASE",
	"org.springframework.data:spring-data-commons":"1.8.0.RELEASE",
	"com.fasterxml.jackson.core:jackson-databind" : "2.4.1.2",
	"com.amazonaws:aws-java-sdk" : "1.8.9",
	"org.apache.storm:storm-core" : "0.9.2-incubating",
	"org.apache.curator:curator-framework" : "2.6.0",
	"com.esotericsoftware.kryo:kryo" : "2.24.0",
	"org.clojars.reideltj:kinesis-storm-spout":"1.0.4-SNAPSHOT",
	"commons-beanutils:commons-beanutils":"1.9.2",
	"org.slf4j:slf4j-api":"1.7.7"
]

subprojects {
	apply plugin: 'java'
	group = 'com.fancypants'
	version = '1.0'

	repositories {
		mavenCentral()
		maven { url "http://repo.spring.io/libs-release" }
		maven { url "http://clojars.org/repo" }
		maven { url "http://repository-opensourceagility.forge.cloudbees.com/snapshot" }
	}
	
	dependencies {
		compile("org.slf4j:slf4j-api")
	}

	configurations.all {
		resolutionStrategy.eachDependency { DependencyResolveDetails details ->
			def overrideVersion = versionOverrides[details.requested.group + ":" + details.requested.name]
			if (overrideVersion != null && details.requested.version != overrideVersion) {
				logger.info "Overriding dependency ${details.requested.group}:${details.requested.name} version ${details.requested.version} --> $overrideVersion"
				details.useVersion overrideVersion
			}		
		}
   	}
}

project(':rest') {
        dependencies {
                compile project(':common')
		compile project(':data')
        }
}

project(':stream') {	
	dependencies {
		compile project(':common')
	}
}

project(':device') { 
	dependencies {
		compile project(':common')
		compile project(':data')
		compile project(':stream')
	}
}

project(':rest-device') {
	dependencies {
		compile project(':common')
		compile project(':rest')
		compile project(':device')
	}
}

project(':app') {
	dependencies {
		compile project(':common')
		compile project(':data')
	}
}

project(':rest-app') {
	dependencies {
		compile project(':common')
		compile project(':rest')
		compile project(':app')
		compile project(':device')
	}
}

project(':processing') { 
	dependencies { 
		compile project(':common')
		compile project(':data')
		compile project(':stream')
	}
}
