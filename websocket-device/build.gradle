buildscript {
    repositories {
        maven { url "http://repo.spring.io/libs-release" }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
		classpath("se.transmode.gradle:gradle-docker:$gradleDockerVersion")
    }
}

apply plugin: 'spring-boot'
apply plugin: 'docker'

jar {
	baseName = 'websocket-device'
	version =  '1.0.0'
}

dependencies {
	/* create a new configuration for all of the application dependencies */
	configurations {
 		bootPackaging {
 			extendsFrom runtime
 		}
	}

	compile("org.springframework.boot:spring-boot-starter-websocket:$springBootVersion")
	//runtime("ch.qos.logback:logback-classic:1.1.3")
	runtime("org.logback-extensions:logback-ext-loggly:$logbackExtensionsVersion")
	runtime("org.codehaus.groovy:groovy-all:$groovyVersion")	
	testCompile("org.springframework.boot:spring-boot-starter-test:$springBootVersion")
	testCompile("org.eclipse.jetty.websocket:websocket-client:$jettyVersion")
	bootPackaging project(':data-dynamodb')
	bootPackaging project(':stream-kinesis')
}

/* use the application dependencies */
bootRepackage {
	customConfiguration = "bootPackaging"
}

/* include the application dependencies in the distribution */
applicationDistribution.from(configurations.bootPackaging) {
	into "lib"
}

/* add application dependencies to the classpath */
startScripts {
	classpath += configurations.bootPackaging
	classpath += files(file('/../$APP_HOME/'))	
}

/* configure the memory usage for the JVM */
applicationDefaultJvmArgs = ["-Xms128M", "-Xmx128M"]

group = 'reideltj'
sourceCompatibility = 1.7
mainClassName = 'com.fancypants.common.application.Application'

distDocker {
	exposePort 8003
	exposePort 8083
	addFile('src/main/security/server.jks','/etc/server.jks')
	setEnvironment('KEYSTORE_FILE', 'file:/etc/server.jks')
}
